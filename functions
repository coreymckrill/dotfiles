# !/bin/bash

# Generate an ANSI color code.
#
# $1 - The name of the color.
# $2 - Optional. Any non-null value. Whether to escape the code with \[ and \].
function color() {
	local color=$1
	local escape=$2
	local code=""

	case "$color" in
		green)  code="\033[0;32m" ;;
		blue)   code="\033[0;34m" ;;
		purple) code="\033[0;35m" ;;
		cyan)   code="\033[0;36m" ;;
		red)    code="\033[1;31m" ;;
		orange) code="\e[38;5;166m" ;;

		none | reset | * ) code="\033[m" ;;
	esac

	if [ ! -z $escape ]; then
		code="\[${code}\]"
	fi

	echo $code
}

# Prune unwanted lines from `svn stat` output.
#
# See https://github.com/iandunn/dotfiles/blob/a45ac99d07edeb5394cba6ea863508b4fee53592/.bash_aliases
#
# $1 - Optional. The raw `svn stat` output.
function prune_svn_stat() {
	# Allow for both function parameter and piping in.
	# https://stackoverflow.com/a/35512655
	local svn_stat=${1:-$(</dev/stdin)};

	# Easier to manage rules when each is on a separate line.
	svn_stat=$(grep -v 'X   ' <<< "$svn_stat")
	svn_stat=$(grep -v 'Performing status on ex' <<< "$svn_stat")
	svn_stat=$(grep -v -e '^$' <<< "$svn_stat")

	echo "$svn_stat"
}

# Determine the SVN 'state' of current location.
# Branch name and `clean` or `dirty`.
#
# See https://github.com/iandunn/dotfiles/blob/a45ac99d07edeb5394cba6ea863508b4fee53592/.bash_prompt
#
# Uses color()
# Uses svnstat alias
function svn_state {
	local esc=$1
	local SVN_INFO=$(svn info 2> /dev/null)
	local branch
	local state

	if [[ -z $SVN_INFO ]]; then
		exit
	fi

	# Get the current branch.
	branch=$(echo "$SVN_INFO" | grep '^URL:' | egrep -o '(tags|branches)/[^/]+|trunk' | egrep -o '[^/]+$')
	if [[ -z $branch ]]; then
		branch="trunk"
	fi
	branch="$(color purple $esc)${branch}$(color reset $esc)"

	# Look for changes.
	if [ ! -z "$(svnstat)" ]; then
		state="$(color red $esc)dirty$(color reset $esc)"
	else
		state="$(color blue $esc)clean$(color reset $esc)"
	fi

	echo -en "$branch:$state"
}

# Delete .orig and .rej files created during a messy SVN patch application.
#
function patchcleanup() {
	local found
	local delete

	found="$(find . \( -name \*.orig -o -name \*.rej \))"

	if [ -z "$found" ]; then
		echo -e "\nNothing found to delete."
	else
		echo -e "\n$found\n"
		read -p 'Delete files? [y/N] ' delete

		case $delete in
			y | yes )
					find . \( -name \*.orig -o -name \*.rej \) -delete
					echo 'Files deleted.'
			;;
			n | no | * )
					echo 'Files retained.'
			;;
		esac
	fi
}
